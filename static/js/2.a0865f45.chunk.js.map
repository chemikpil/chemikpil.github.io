{"version":3,"sources":["common/Timer/Timer.jsx","common/Timer/index.js"],"names":["nowTimer","sec","min","hours","days","Timer","state","left","_this","props","start","Date","intervalID","incrementTimer","setState","clearInterval","getTimer","timer","Math","floor","setInterval","this","console","log","react_default","a","createElement","className","concat","Component","__webpack_require__","d","__webpack_exports__","common_Timer_Timer"],"mappings":"8KAeMA,SAAW,CACbC,IAAK,EACLC,IAAK,EACLC,MAAO,EACPC,KAAM,IA+DKC,6MA3DXC,MAAQ,CACJC,KAAMC,EAAKC,MAAMC,OAAS,IAAIC,KAC9BC,WAAY,QAwBhBC,eAAiB,WAAM,IACXN,EAASC,EAAKF,MAAdC,KAEJA,EAAO,EACPC,EAAKM,SAAS,CACVP,KAAMA,EAAO,MAGjBQ,cAAcP,EAAKF,MAAMM,eAIjCI,SAAW,SAACC,GAAD,MAAoB,CAC3BhB,IAAKiB,KAAKC,MAAMF,GAAS,KAAQ,GACjCf,IAAKgB,KAAKC,MAAMF,GAAS,IAAM,GAC/Bd,MAAOe,KAAKC,MAAMF,GAAS,IAAM,GACjCb,KAAMc,KAAKC,MAAMF,EAAQ,yFA9BzB,IAAML,EAAaQ,YAAYC,KAAKR,eAAgB,KAEpDS,QAAQC,IAAI,SAEZF,KAAKP,SAAS,CACVF,8DAKJU,QAAQC,IAAI,WACZR,cAAcM,KAAKf,MAAMM,6CAsBnB,IACEL,EAASc,KAAKf,MAAdC,KACFU,EAAQV,EAAO,EAAIc,KAAKL,SAAST,GAAQP,EAI/C,OAFAsB,QAAQC,IAAIhB,EAAMU,GAGdO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAf,GAAAC,OACQX,EAAMb,KADd,SAAAwB,OAC0BX,EAAMd,MADhC,MAAAyB,OAC0CX,EAAMf,IADhD,MAAA0B,OACwDX,EAAMhB,IAD9D,yDA/CwBQ,EAAOH,GACnC,MAAO,CACHC,KAAME,EAAMC,OAAS,IAAIC,aARjBkB,aCtBpBC,EAAAC,EAAAC,EAAA,4BAAAC","file":"static/js/2.a0865f45.chunk.js","sourcesContent":["// @flow\n\nimport React, { Component } from 'react';\n\nimport './Timer.css';\n\ntype PropsType = {\n    timestamp: number\n};\n\ntype StateType = {\n    left: number,\n    intervalID: number\n};\n\nconst nowTimer = {\n    sec: 0,\n    min: 0,\n    hours: 0,\n    days: 0\n};\n\nclass Timer extends Component<PropsType, StateType> {\n    state = {\n        left: this.props.start - +new Date(),\n        intervalID: null\n    };\n\n    static getDerivedStateFromProps(props, state) {\n        return {\n            left: props.start - +new Date(),\n        };\n    };\n\n    componentDidMount() {\n        const intervalID = setInterval(this.incrementTimer, 1000);\n\n        console.log('mount')\n\n        this.setState({\n            intervalID\n        });\n    };\n\n    componentWillUnmount() {\n        console.log('unmount');\n        clearInterval(this.state.intervalID);\n    };\n\n    incrementTimer = () => {\n        const { left } = this.state;\n\n        if (left > 0 ) { \n            this.setState({\n                left: left - 1000\n            });\n        } else {\n            clearInterval(this.state.intervalID);\n        }\n    };\n\n    getTimer = (timer: number) => ({\n        sec: Math.floor(timer /= 1000) % 60,\n        min: Math.floor(timer /= 60) % 60,\n        hours: Math.floor(timer /= 60) % 24,\n        days: Math.floor(timer / 24)\n    });\n\n    render () {\n        const { left } = this.state;\n        const timer = left > 0 ? this.getTimer(left) : nowTimer;\n\n        console.log(left, timer);\n\n        return(\n            <div className='Timer'>\n                {`${timer.days} dni ${timer.hours}h ${timer.min}m ${timer.sec}s`}\n            </div>\n        )\n    };\n}\n\nexport default Timer;\n","export { default } from './Timer';\n"],"sourceRoot":""}